module type S  = sig type 'a t val f : 'a t -> 'a t val g : int -> 'a t end
[@@deriving mica_types]
include
  struct
    type expr =
      | F of expr 
      | G of int 
    type ty =
      | IntT 
    let gen_expr ty =
      let open Core.Quickcheck.Generator in
        let open Let_syntax in size >>= (fun x -> return x)
  end[@@ocaml.doc "@inline"][@@merlin.hide ]
