module type S  = sig type 'a t val f : int -> 'a t -> 'a t end[@@deriving
                                                                mica_types]
include
  struct
    type expr =
      | F of int * expr 
    type ty =
      | IntT 
    let gen_expr ty =
      let open Core in
        let open Quickcheck.Generator in
          let open Let_syntax in
            size >>=
              (fun x ->
                 match ty with | IntT -> of_list [F (int__001_, expr__002_)])
  end[@@ocaml.doc "@inline"][@@merlin.hide ]
