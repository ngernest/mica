module type StackInterface  =
  sig
    type 'a t
    val empty : 'a t
    val push : 'a -> 'a t -> 'a t
    val pop : 'a t -> 'a t option
    val peek : 'a t -> 'a option
    val clear : 'a t -> unit
    val is_empty : 'a t -> bool
    val length : 'a t -> int
  end[@@deriving (mica_types, mica)]
include
  struct
    [@@@ocaml.warning "-60"]
    type expr =
      | Empty 
      | Push of int * expr 
      | Pop of expr 
      | Peek of expr 
      | Clear of expr 
      | Is_empty of expr 
      | Length of expr 
    type ty =
      | Bool 
      | Int 
      | IntOption 
      | IntT 
      | IntTOption 
      | Unit 
    let gen_expr ty =
      let open Core in
        let open Quickcheck.Generator in
          let open Let_syntax in
            size >>=
              (fun x ->
                 match ty with
                 | Bool -> of_list [Is_empty expr__006_]
                 | Int -> of_list [Length expr__007_]
                 | IntOption -> of_list [Peek expr__004_]
                 | IntT -> of_list [Empty (); Push (int__001_, expr__002_)]
                 | IntTOption -> of_list [Pop expr__003_]
                 | Unit -> of_list [Clear expr__005_])
    module TestHarness(M:StackInterface) =
      struct
        include M
        type value =
          | ValBool of bool 
          | ValInt of int 
          | ValIntOption of int option 
          | ValIntT of int t 
          | ValIntTOption of int t option 
          | ValUnit of unit 
        let rec interp e =
          match e with
          | Empty -> ValIntT M.empty
          | Push (int__008_, expr__009_) ->
              (match interp expr__009_ with
               | ValIntT expr__009_' ->
                   ValIntT (M.push int__008_ expr__009_')
               | _ -> failwith "impossible: n-ary constructor")
          | Pop expr__010_ ->
              (match interp expr__010_ with
               | ValIntT expr__010_' -> ValIntTOption (M.pop expr__010_')
               | _ -> failwith "impossible: unary constructor")
          | Peek expr__011_ ->
              (match interp expr__011_ with
               | ValIntT expr__011_' -> ValIntOption (M.peek expr__011_')
               | _ -> failwith "impossible: unary constructor")
          | Clear expr__012_ ->
              (match interp expr__012_ with
               | ValIntT expr__012_' -> ValUnit (M.clear expr__012_')
               | _ -> failwith "impossible: unary constructor")
          | Is_empty expr__013_ ->
              (match interp expr__013_ with
               | ValIntT expr__013_' -> ValBool (M.is_empty expr__013_')
               | _ -> failwith "impossible: unary constructor")
          | Length expr__014_ ->
              (match interp expr__014_ with
               | ValIntT expr__014_' -> ValInt (M.length expr__014_')
               | _ -> failwith "impossible: unary constructor")
      end
  end[@@ocaml.doc "@inline"][@@merlin.hide ]
