module type RegexMatcher  =
  sig
    type t
    val void : t
    val empty : t
    val lit : char -> t
    val alt : t -> t -> t
    val cat : t -> t -> t
    val star : t -> t
    val matchString : t -> string -> bool
    val acceptsEmpty : t -> bool
  end[@@deriving (mica_types, mica)]
include
  struct
    [@@@ocaml.warning "-60"]
    type expr =
      | Void 
      | Empty 
      | Lit of char 
      | Alt of expr * expr 
      | Cat of expr * expr 
      | Star of expr 
      | MatchString of expr * string 
      | AcceptsEmpty of expr 
    type ty =
      | Bool 
      | T 
    let gen_expr ty =
      let open Core in
        let open Quickcheck.Generator in
          let open Let_syntax in
            size >>=
              (fun x ->
                 match ty with
                 | Bool ->
                     of_list
                       [MatchString (expr__007_, string__008_);
                       AcceptsEmpty expr__009_]
                 | T ->
                     of_list
                       [Void ();
                       Empty ();
                       Lit char__001_;
                       Alt (expr__002_, expr__003_);
                       Cat (expr__004_, expr__005_);
                       Star expr__006_])
    module TestHarness(M:RegexMatcher) =
      struct
        include M
        type value =
          | ValBool of bool 
          | ValT of t 
        let rec interp e =
          match e with
          | Void -> ValT M.void
          | Empty -> ValT M.empty
          | Lit char__010_ -> ValT (M.lit char__010_)
          | Alt (expr__011_, expr__012_) ->
              (match ((interp expr__011_), (interp expr__012_)) with
               | (ValT expr__011_', ValT expr__012_') ->
                   ValT (M.alt expr__011_' expr__012_')
               | _ -> failwith "impossible: n-ary constructor")
          | Cat (expr__013_, expr__014_) ->
              (match ((interp expr__013_), (interp expr__014_)) with
               | (ValT expr__013_', ValT expr__014_') ->
                   ValT (M.cat expr__013_' expr__014_')
               | _ -> failwith "impossible: n-ary constructor")
          | Star expr__015_ ->
              (match interp expr__015_ with
               | ValT expr__015_' -> ValT (M.star expr__015_')
               | _ -> failwith "impossible: unary constructor")
          | MatchString (expr__016_, string__017_) ->
              (match interp expr__016_ with
               | ValT expr__016_' ->
                   ValBool (M.matchString expr__016_' string__017_)
               | _ -> failwith "impossible: n-ary constructor")
          | AcceptsEmpty expr__018_ ->
              (match interp expr__018_ with
               | ValT expr__018_' -> ValBool (M.acceptsEmpty expr__018_')
               | _ -> failwith "impossible: unary constructor")
      end
  end[@@ocaml.doc "@inline"][@@merlin.hide ]
