module type RegexMatcher  =
  sig
    type t
    val void : t
    val empty : t
    val lit : char -> t
    val alt : t -> t -> t
    val cat : t -> t -> t
    val star : t -> t
    val matchString : t -> string -> bool
    val acceptsEmpty : t -> bool
  end[@@deriving (mica_types, mica)]
include
  struct
    [@@@ocaml.warning "-60"]
    type expr =
      | Void 
      | Empty 
      | Lit of char 
      | Alt of expr * expr 
      | Cat of expr * expr 
      | Star of expr 
      | MatchString of expr * string 
      | AcceptsEmpty of expr 
    type ty =
      | Bool 
      | T 
    let gen_expr ty =
      let open Core.Quickcheck.Generator in
        let open Let_syntax in
          [%bind let x = small_non_negative_int in return x]
    module TestHarness(M:RegexMatcher) =
      struct
        include M
        type value =
          | ValBool of bool 
          | ValT of t 
        let rec interp e =
          match e with
          | Void -> ValT M.void
          | Empty -> ValT M.empty
          | Lit char__001_ -> ValT (M.lit char__001_)
          | Alt (expr__002_, expr__003_) ->
              (match ((interp expr__002_), (interp expr__003_)) with
               | (ValT expr__002_', ValT expr__003_') ->
                   ValT (M.alt expr__002_' expr__003_')
               | _ -> failwith "impossible: n-ary constructor")
          | Cat (expr__004_, expr__005_) ->
              (match ((interp expr__004_), (interp expr__005_)) with
               | (ValT expr__004_', ValT expr__005_') ->
                   ValT (M.cat expr__004_' expr__005_')
               | _ -> failwith "impossible: n-ary constructor")
          | Star expr__006_ ->
              (match interp expr__006_ with
               | ValT expr__006_' -> ValT (M.star expr__006_')
               | _ -> failwith "impossible: unary constructor")
          | MatchString (expr__007_, string__008_) ->
              (match interp expr__007_ with
               | ValT expr__007_' ->
                   ValBool (M.matchString expr__007_' string__008_)
               | _ -> failwith "impossible: n-ary constructor")
          | AcceptsEmpty expr__009_ ->
              (match interp expr__009_ with
               | ValT expr__009_' -> ValBool (M.acceptsEmpty expr__009_')
               | _ -> failwith "impossible: unary constructor")
      end
  end[@@ocaml.doc "@inline"][@@merlin.hide ]
