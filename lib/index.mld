{0 Automated Property-Based Testing for OCaml Modules}
Welcome to the documentation page for our automated PBT tool!

{1 Overview}
Our tool parses any generic OCaml module signature, and checks whether two modules implementing the signature are observationally equivalent by generating random sequences of commands using Core.QuickCheck.

{1 Building & running}
This project compiles with [dune build].

{2 Usage}
[dune exec -- bin/main.exe [.ml file containing signature] [.ml file containing 1st module] [.ml file containing 2nd module]]

This command runs our tool and creates two new files:
- [lib/Generated.ml] (contains PBT code for testing an OCaml module)
- [bin/compare_impls.ml] (code for an executable that tests two modules for observational equivalence)
To run the generated executable, run [dune exec -- bin/compare_impls.exe].

{2 Dependencies}
- {{: https://github.com/janestreet/base} Base}
- {{: https://github.com/janestreet/core} Core}
- {{: https://github.com/janestreet/core_unix} Core_unix}
- {{: https://github.com/inhabitedtype/angstrom} Angstrom}
- {{: https://github.com/fpottier/pprint} PPrint}
- {{: https://github.com/janestreet/stdio} Stdio}

{1 Example (finite sets)}

To run our tool on [SetInterface], a module signature for finite sets, and check if two modules 
[ListSet] and [BSTSet] implementing this signature are observationally equivalent, we can run:
[dune exec -- bin/main.exe lib/sets/SetInterface.ml lib/sets/ListSet.ml lib/sets/BSTSet.ml] 

This checks if the [ListSet] and [BSTSet] modules both correctly implement the interface [SetInterface]. 
The files [lib/GeneratedSetPBTCode.ml] and [lib/GeneratedSetExecutable.ml] in the GitHub repo 
contain PBT code that is automatically generated by our tool.

{1 Library documentation}

{!modules:
  Lib.Parser
  Lib.ParserTypes
  Lib.ModuleParser
  Lib.CodeGenerator
  Lib.CmdLineParser
}
